--> Criar BD:
    - No MySQL Command Line ou Workbench, entrar no servidor com sua senha.
    - Digitar o seguinte comando:
        CREATE DATABASE nome_do_bd;

--> Criar tabela:
    - Limpar console (terminal).
    - Definir qual BD vai ser utilizado, comando:
        USE nome_do_bd;
    - Comando:
        CREATE TABLE nome_da_tabela (
            tipo_primitivo campo, -- int, varchar(String tamanho (var)variavel), String char (tamanho fixo)
            tipo_complexo campo, -- enum, JSON
            tipo campo -- último não tem vírgula, igual enum em Java
        );

// boa prática: NÃO SE SALVA IDADE NO BANCO DE DADOS, JÁ QUE SEMPRE MUDA, SE SALVA DATA DE NASCIMENTO.

--> Ver qual BD está sendo utilizado:
    - Comando:
        STATUS;

--> Ver detalhadamente campos da tabela:
    - Comando:
        DESCRIBE nome_da_tabela;

--> Ver todos bancos de dados criados no seu servidor:
    - Comando:
        SHOW DATABASES;

--> Apagar banco de dados:
    - Comando:
        DROP DATABASE nome_do_bd;

--> Processo de BD com boas práticas:
    - Criar BD (ex: cadastro):
        CREATE DATABASE cadastro
        DEFAULT CHARACTER SET utf8mb4
        DEFAULT COLLATE utf8mb4_unicode_ci;
    - Criar tabela:
        CREATE TABLE IF NOT EXISTS pessoas (
            id INT AUTO_INCREMENT PRIMARY KEY, -- Identificador único para cada registro, incrementado automaticamente.
            nome VARCHAR(30) NOT NULL, -- Campo obrigatório para armazenar o nome (máximo: 30 caracteres).
            nascimento DATE, -- Campo para armazenar datas no formato AAAA-MM-DD.
            sexo ENUM('M', 'F'), -- Define valores limitados para o campo: 'M' (masculino) ou 'F' (feminino).
            peso DECIMAL(5,2), -- Permite valores numéricos até 999.99 (5 dígitos no total, 2 após o ponto decimal).
            altura DECIMAL(3,2), -- Permite valores numéricos até 9.99 (3 dígitos no total, 2 após o ponto decimal).
            nacionalidade VARCHAR(20) DEFAULT 'Brasil' -- Define o valor padrão como 'Brasil' caso não seja preenchido.
        ) DEFAULT CHARSET = utf8mb4; -- Usa o charset utf8mb4 para suporte completo a caracteres Unicode.

--> Inserir valores na tabela (ex: pessoas):
    INSERT INTO pessoas
    (id, nome, nascimento, sexo, peso, altura, nacionalidade)
    VALUES
    (1, 'Joaquim', '2006-02-09', 'M', 70.5, 1.71, 'Brasil');

    // NÃO HÁ NECESSIDADE DE DAR O ID, JÁ QUE ELE É AUTO_INCREMENT

    Portanto, forma correta:
    INSERT INTO pessoas
    (nome, nascimento, sexo, peso, altura, nacionalidade)
    VALUES
    ('Joaquim', '2006-02-09', 'M', 70.5, 1.71, 'Brasil');

    // SE A ORDEM DE INSERÇÃO DOS DADOS FOR IGUAL À ORDEM JÁ EXISTENTE DOS CAMPOS NA TABELA, NÃO HÁ NECESSIDADE DE ESCREVER OS CAMPOS

    Portanto, seria, com mais pessoas de uma vez também:
    INSERT INTO pessoas VALUES
    ('Joaquim', '2006-02-09', 'M', 70.5, 1.71, 'Brasil'),
    ('Anna', '2006-02-09', 'M', 70.5, 1.71, 'Brasil'),
    ('Pedro', '2006-02-09', 'M', 70.5, 1.71, 'Brasil');

--> Alterar estrutura de uma tabela:
    Adicionar coluna (campo):
        ALTER TABLE tabela_name
        ADD COLUMN profissao VARCHAR(30); -- alteração exemplo
    Remover campo:
        ALTER TABLE tabela_name
        DROP COLUMN profissao;
    Adicionar em posição específica:
        ALTER TABLE tabela_name
        ADD COLUMN profissao VARCHAR(30) AFTER nome;

        Ou também para ser o primeiro:
        ALTER TABLE pessoas
        ADD COLUMN profissao VARCHAR(30) FIRST;

    Renomear tabela:
        ALTER TABLE pessoas
        RENAME TO people;

    Remover uma tabela:
        DROP TABLE IF EXISTS tabela_name;

--> Alterar estrutura de uma definição (campo):
        ALTER TABLE pessoas
        MODIFY COLUMN profissao VARCHAR(50) NOT NULL DEFAULT ''; -- foi de 30 para 50 caracteres e não pode ser nulo
        e seu valor default é vazio ('').

--> Renomear campo:
        ALTER TABLE pessoas
        CHANGE COLUMN profissao prof VARCHAR(20); -- é necessário renomear e reescrever todas as constraints que ele tem

// TODOS OS COMANDOS COM COLUMN, NÃO HÁ NECESSIDADE DE ESCREVER COLUMN

--> Manipulando linhas (tuplas):
    UPDATE
        O comando UPDATE é usado para alterar os dados de um ou mais registros existentes em uma tabela.

    Sintaxe:

        UPDATE nome_da_tabela
        SET campo = novo_valor
        WHERE condição;
        Exemplo: Corrigir o nome do curso com idcurso = 5 de "Jarva" para "Java":

    UPDATE cursos
    SET nome = 'Java'
    WHERE idcurso = 5;
    2. DELETE
    O comando DELETE é usado para remover registros específicos de uma tabela com base em uma condição.

    Sintaxe:

    DELETE FROM nome_da_tabela
    WHERE condição;
    Exemplo: Excluir o curso com idcurso = 10:

    DELETE FROM cursos
    WHERE idcurso = 10;
    ⚠️ Sem o WHERE, todos os registros serão removidos, mas a estrutura da tabela será preservada.

    3. TRUNCATE
    O comando TRUNCATE é usado para remover todos os registros de uma tabela de forma rápida e eficiente. Ele reseta os contadores de IDs automaticamente (em tabelas que usam AUTO_INCREMENT).

    Sintaxe:

    TRUNCATE TABLE nome_da_tabela;
    Exemplo: Remover todos os registros da tabela cursos:

    TRUNCATE TABLE cursos;
    ⚠️ Não é possível usar uma condição (WHERE) com TRUNCATE. Ele apaga todos os registros da tabela.

    Diferenças principais:
    UPDATE: Altera valores específicos em registros.
    DELETE: Remove registros específicos, mantendo a estrutura da tabela e os contadores.
    TRUNCATE: Remove todos os registros de forma mais rápida, reseta contadores e não pode ser usado com condições.

--> Uso do LIMIT
    Eh uma acao de seguranca para acoes DML, que definem o limite de egistros que serao alterados,
    de acordo com o comando de update ou delete;
    Ex de uso:
        UPDATE pessoas
        SET nome = 'Joaquim'
        WHERE id=1
        LIMIT 1;

        ou

        DELETE FROM pessoas
        WHERE idade > 30
        LIMIT 5;

--> Fazendo dump pelo Prompt de comando do WINDOWS
    dump == back-up de um banco de dados
    Exemplo prático:
    1- Abrir prompt
    2- Executar:
        mysqldump -u root -p meu_banco > meu_banco_dump.sql
        -u root: Substitua root pelo nome do seu usuário MySQL.
        -p: Solicita a senha do usuário MySQL (digite após o comando e pressione Enter).
        meu_banco: Substitua pelo nome do banco que você quer fazer o dump.
        meu_banco_dump.sql: Nome do arquivo onde o dump será salvo.
    3- Inserir a Senha
        Após pressionar Enter, será solicitado que você insira a senha do usuário MySQL. Digite a senha e pressione Enter.

    4- Verificar o Arquivo Gerado
        O arquivo meu_banco_dump.sql será criado no diretório onde você executou o comando.
        Esse arquivo contém o backup completo do banco de dados.

--> Fazendo dump de todos bd`s

    mysqldump -u root -p --all-databases > todos_bancos_dump.sql


